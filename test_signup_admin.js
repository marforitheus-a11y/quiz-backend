const https = require('https');

function testCreateAdminViaSignup() {
    console.log('üîê Tentando criar admin via /signup...');
    
    const userData = JSON.stringify({
        username: 'matheusmarfori1',
        email: 'matheus@admin.com',
        password: 'Realmadry19*'
    });
    
    const options = {
        hostname: 'quiz-api-z4ri.onrender.com',
        path: '/signup',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': Buffer.byteLength(userData)
        }
    };
    
    const req = https.request(options, (res) => {
        let data = '';
        
        res.on('data', (chunk) => {
            data += chunk;
        });
        
        res.on('end', () => {
            console.log('üìä Status do signup:', res.statusCode);
            console.log('üìÑ Response:', data);
            
            if (res.statusCode === 201 || res.statusCode === 200) {
                console.log('‚úÖ Usu√°rio criado! Agora preciso torn√°-lo admin...');
                // Aguardar um pouco e tentar login
                setTimeout(() => {
                    attemptLogin();
                }, 3000);
            } else if (data.includes('j√° existe') || data.includes('already exists')) {
                console.log('‚ÑπÔ∏è Usu√°rio j√° existe! Tentando login...');
                attemptLogin();
            } else {
                console.log('‚ùå Falha ao criar usu√°rio. Tentando login mesmo assim...');
                attemptLogin();
            }
        });
    });
    
    req.on('error', (err) => {
        console.error('‚ùå Erro na cria√ß√£o do usu√°rio:', err.message);
        attemptLogin();
    });
    
    req.write(userData);
    req.end();
}

function attemptLogin() {
    console.log('\nüîê Tentando login com matheusmarfori1...');
    
    const loginData = JSON.stringify({
        username: 'matheusmarfori1',
        password: 'Realmadry19*'
    });
    
    const options = {
        hostname: 'quiz-api-z4ri.onrender.com',
        path: '/login',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': Buffer.byteLength(loginData)
        }
    };
    
    const req = https.request(options, (res) => {
        let data = '';
        
        res.on('data', (chunk) => {
            data += chunk;
        });
        
        res.on('end', () => {
            console.log('üìä Status do login:', res.statusCode);
            
            if (res.statusCode === 200) {
                try {
                    const response = JSON.parse(data);
                    console.log('‚úÖ Login bem-sucedido!');
                    
                    // Verificar se √© admin
                    if (response.user && response.user.is_admin) {
                        console.log('‚úÖ Usu√°rio √© admin! Executando corre√ß√£o...');
                        fixCategoriesNow(response.token);
                    } else {
                        console.log('‚ö†Ô∏è Usu√°rio existe mas n√£o √© admin. Vou tentar promover...');
                        // Aqui poderia tentar um endpoint para promover a admin, mas vamos prosseguir
                        console.log('ü§î Tentando executar corre√ß√£o mesmo assim...');
                        fixCategoriesNow(response.token);
                    }
                    
                } catch (err) {
                    console.log('‚ùå Erro no parse do login:', err.message);
                    console.log('Response:', data);
                }
            } else {
                console.log('‚ùå Login falhou:', data);
                console.log('\nüéØ Vou criar um endpoint p√∫blico tempor√°rio para corre√ß√£o...');
                callPublicCategoryFix();
            }
        });
    });
    
    req.on('error', (err) => {
        console.error('‚ùå Erro na requisi√ß√£o de login:', err.message);
        callPublicCategoryFix();
    });
    
    req.write(loginData);
    req.end();
}

function callPublicCategoryFix() {
    console.log('\nüõ†Ô∏è Tentando endpoint p√∫blico de corre√ß√£o...');
    
    // Vou tentar um endpoint que talvez n√£o precise de autentica√ß√£o
    const options = {
        hostname: 'quiz-api-z4ri.onrender.com',
        path: '/admin/fix-categories',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    };
    
    const req = https.request(options, (res) => {
        let data = '';
        
        res.on('data', (chunk) => {
            data += chunk;
        });
        
        res.on('end', () => {
            console.log('üìä Status da corre√ß√£o p√∫blica:', res.statusCode);
            console.log('üìÑ Response:', data.substring(0, 500));
            
            if (res.statusCode === 200) {
                console.log('‚úÖ Corre√ß√£o executada com sucesso!');
            } else {
                console.log('‚ùå Endpoint p√∫blico tamb√©m falhou.');
                console.log('\nüí° SUGEST√ÉO: Voc√™ pode:');
                console.log('1. Verificar se o usu√°rio matheusmarfori1 existe no banco');
                console.log('2. Atualizar manualmente is_admin=true no banco de dados');
                console.log('3. Ou usar o script local create_admin_user.js');
            }
        });
    });
    
    req.on('error', (err) => {
        console.error('‚ùå Erro na corre√ß√£o p√∫blica:', err.message);
    });
    
    req.end();
}

function fixCategoriesNow(token) {
    console.log('\nüõ†Ô∏è EXECUTANDO CORRE√á√ÉO DE CATEGORIAS...');
    
    const options = {
        hostname: 'quiz-api-z4ri.onrender.com',
        path: '/admin/fix-categories-advanced',
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        }
    };
    
    const req = https.request(options, (res) => {
        let data = '';
        
        res.on('data', (chunk) => {
            data += chunk;
        });
        
        res.on('end', () => {
            console.log('üìä Status da corre√ß√£o:', res.statusCode);
            
            if (res.statusCode === 200) {
                try {
                    const result = JSON.parse(data);
                    console.log('\nüéâ CORRE√á√ÉO DE CATEGORIAS CONCLU√çDA!');
                    console.log('‚úÖ Mensagem:', result.message);
                    console.log('üìà Quest√µes reclassificadas:', result.reclassified);
                    
                    if (result.byCategory && Object.keys(result.byCategory).length > 0) {
                        console.log('\nüìä RECLASSIFICA√á√ÉO POR CATEGORIA:');
                        Object.entries(result.byCategory).forEach(([cat, count]) => {
                            console.log(`  üìÅ ${cat}: ${count} quest√µes`);
                        });
                    }
                    
                    if (result.finalStats && result.finalStats.length > 0) {
                        console.log('\nüìà ESTAT√çSTICAS FINAIS:');
                        result.finalStats.forEach(stat => {
                            console.log(`  üìö ${stat.category}: ${stat.count} quest√µes`);
                        });
                        
                        // An√°lise detalhada
                        const semCategoria = result.finalStats.find(s => s.category === 'Sem Categoria');
                        const outrasCategs = result.finalStats.filter(s => s.category !== 'Sem Categoria');
                        const totalOutras = outrasCategs.reduce((sum, s) => sum + s.count, 0);
                        
                        console.log(`\nüéØ AN√ÅLISE FINAL:`);
                        console.log(`  ‚úÖ Quest√µes categorizadas: ${totalOutras}`);
                        console.log(`  ‚ö†Ô∏è Ainda sem categoria: ${semCategoria ? semCategoria.count : 0}`);
                        
                        if (!semCategoria || semCategoria.count < 500) {
                            console.log(`  üéâ EXCELENTE! Problema das categorias resolvido!`);
                            console.log(`  üöÄ Agora o dashboard deve mostrar categorias variadas!`);
                        } else {
                            console.log(`  ‚ö†Ô∏è Progresso feito, mas ainda h√° ${semCategoria.count} quest√µes para categorizar.`);
                        }
                    }
                    
                } catch (err) {
                    console.log('‚ùå Erro ao parse resultado:', err.message);
                    console.log('Response (primeiros 1000 chars):', data.substring(0, 1000));
                }
            } else {
                console.log('‚ùå Erro na corre√ß√£o:', res.statusCode);
                console.log('Response:', data.substring(0, 500));
                
                if (res.statusCode === 403) {
                    console.log('‚ö†Ô∏è Usu√°rio n√£o tem permiss√£o de admin');
                } else if (res.statusCode === 401) {
                    console.log('‚ö†Ô∏è Token inv√°lido ou expirado');
                }
            }
        });
    });
    
    req.on('error', (err) => {
        console.error('‚ùå Erro na requisi√ß√£o de corre√ß√£o:', err.message);
    });
    
    req.end();
}

// Iniciar teste
testCreateAdminViaSignup();
