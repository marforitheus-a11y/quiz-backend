const https = require('https');

function testImprovedMetrics() {
    console.log('Testando m√©tricas melhoradas ap√≥s corre√ß√µes...');
    
    // Fazer login primeiro
    const loginData = JSON.stringify({
        username: 'local_admin',
        password: 'AdminPass123!'
    });
    
    const options = {
        hostname: 'quiz-api-z4ri.onrender.com',
        path: '/login',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': Buffer.byteLength(loginData)
        }
    };
    
    const req = https.request(options, (res) => {
        let data = '';
        
        res.on('data', (chunk) => {
            data += chunk;
        });
        
        res.on('end', () => {
            if (res.statusCode === 200) {
                try {
                    const response = JSON.parse(data);
                    console.log('‚úì Login bem-sucedido!');
                    
                    // Aguardar um pouco para o deploy e testar m√©tricas
                    console.log('Aguardando deploy do backend...');
                    setTimeout(() => {
                        testMetricsEndpoint(response.token);
                    }, 30000); // 30 segundos
                } catch (err) {
                    console.log('Erro no parse do login:', err.message);
                }
            } else {
                console.log('‚úó Erro no login:', data);
            }
        });
    });
    
    req.on('error', (err) => {
        console.error('Erro na requisi√ß√£o de login:', err.message);
    });
    
    req.write(loginData);
    req.end();
}

function testMetricsEndpoint(token) {
    console.log('\n=== TESTANDO M√âTRICAS MELHORADAS ===');
    
    const options = {
        hostname: 'quiz-api-z4ri.onrender.com',
        path: '/admin/dashboard/metrics',
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${token}`
        }
    };
    
    const req = https.request(options, (res) => {
        let data = '';
        
        res.on('data', (chunk) => {
            data += chunk;
        });
        
        res.on('end', () => {
            console.log('Metrics Status:', res.statusCode);
            
            if (res.statusCode === 200) {
                try {
                    const metrics = JSON.parse(data);
                    console.log('üéâ M√âTRICAS OBTIDAS COM SUCESSO!\n');
                    
                    // Verificar overview
                    console.log('=== OVERVIEW ===');
                    console.log('‚úì Total de usu√°rios:', metrics.overview?.totalUsers || 'N/A');
                    console.log('‚úì Total de quest√µes:', metrics.overview?.totalQuestions || 'N/A');
                    console.log('‚úì Total de categorias:', metrics.overview?.totalCategories || 'N/A');
                    console.log('‚úì Usu√°rios ativos:', metrics.overview?.activeUsers || 'N/A');
                    console.log('‚úì Taxa de crescimento:', metrics.overview?.userGrowthRate || 'N/A', '%');
                    
                    // Verificar quest√µes por categoria
                    console.log('\n=== QUEST√ïES POR CATEGORIA ===');
                    if (metrics.questionStats?.byCategory?.length > 0) {
                        console.log('‚úÖ CORRIGIDO: Categorias encontradas!');
                        metrics.questionStats.byCategory.forEach(cat => {
                            console.log(`  üìÅ ${cat.category}: ${cat.count} quest√µes`);
                        });
                    } else {
                        console.log('‚ùå Ainda sem categorias');
                    }
                    
                    // Verificar quest√µes por dificuldade
                    console.log('\n=== QUEST√ïES POR DIFICULDADE ===');
                    if (metrics.questionStats?.byDifficulty?.length > 0) {
                        metrics.questionStats.byDifficulty.forEach(diff => {
                            console.log(`  üéØ ${diff.difficulty}: ${diff.count} quest√µes`);
                        });
                    } else {
                        console.log('‚ùå Sem dados de dificuldade');
                    }
                    
                    // Verificar performance
                    console.log('\n=== PERFORMANCE GERAL ===');
                    if (metrics.performance) {
                        const perf = metrics.performance;
                        if (perf.totalSessions > 0) {
                            console.log('‚úÖ CORRIGIDO: Performance com dados!');
                            console.log(`  üìä Sess√µes totais: ${perf.totalSessions}`);
                            console.log(`  üìà Score m√©dio: ${perf.avgScore}`);
                            console.log(`  üìâ Score m√≠nimo: ${perf.minScore}`);
                            console.log(`  üìà Score m√°ximo: ${perf.maxScore}`);
                        } else {
                            console.log('‚ùå Performance ainda zerada');
                        }
                    }
                    
                    // Verificar top usu√°rios
                    console.log('\n=== TOP 5 USU√ÅRIOS ===');
                    if (metrics.activity?.topUsers?.length > 0) {
                        console.log('‚úÖ CORRIGIDO: Top usu√°rios encontrados!');
                        metrics.activity.topUsers.forEach((user, i) => {
                            console.log(`  ${i + 1}. üë§ ${user.username} - ${user.quizCount} quizzes`);
                        });
                    } else {
                        console.log('‚ùå Top usu√°rios ainda vazio');
                    }
                    
                    // Verificar atividade por dia
                    console.log('\n=== ATIVIDADE POR DIA ===');
                    if (metrics.activity?.sessionsPerDay?.length > 0) {
                        console.log('‚úÖ CORRIGIDO: Sess√µes por dia encontradas!');
                        metrics.activity.sessionsPerDay.forEach(day => {
                            console.log(`  üìÖ ${day.date}: ${day.count} sess√µes`);
                        });
                    } else {
                        console.log('‚ùå Sess√µes por dia ainda vazio');
                    }
                    
                    console.log('\nüèÅ RESUMO DOS PROBLEMAS:');
                    const problems = [];
                    
                    if (!metrics.questionStats?.byCategory?.length || 
                        (metrics.questionStats.byCategory.length === 1 && 
                         metrics.questionStats.byCategory[0].category === 'Sem Categoria')) {
                        problems.push('‚ùå Categorias ainda n√£o corrigidas');
                    } else {
                        console.log('‚úÖ Categorias: CORRIGIDO');
                    }
                    
                    if (!metrics.performance?.totalSessions || metrics.performance.totalSessions === 0) {
                        problems.push('‚ùå Performance ainda zerada');
                    } else {
                        console.log('‚úÖ Performance: CORRIGIDO');
                    }
                    
                    if (!metrics.overview?.activeUsers || metrics.overview.activeUsers === 0) {
                        problems.push('‚ùå Usu√°rios ativos ainda zero');
                    } else {
                        console.log('‚úÖ Usu√°rios ativos: CORRIGIDO');
                    }
                    
                    if (!metrics.activity?.topUsers?.length) {
                        problems.push('‚ùå Top usu√°rios ainda vazio');
                    } else {
                        console.log('‚úÖ Top usu√°rios: CORRIGIDO');
                    }
                    
                    if (problems.length === 0) {
                        console.log('\nüéâ TODOS OS PROBLEMAS FORAM CORRIGIDOS!');
                    } else {
                        console.log('\n‚ö†Ô∏è Problemas restantes:');
                        problems.forEach(problem => console.log(problem));
                        console.log('\nPode levar alguns minutos para o deploy refletir todas as mudan√ßas.');
                    }
                    
                } catch (err) {
                    console.log('Erro ao parse m√©tricas:', err.message);
                    console.log('Response (primeiros 500 chars):', data.substring(0, 500));
                }
            } else {
                console.log('‚úó Erro ao buscar m√©tricas:', res.statusCode, data);
            }
        });
    });
    
    req.on('error', (err) => {
        console.error('Erro na requisi√ß√£o de m√©tricas:', err.message);
    });
    
    req.end();
}

// Iniciar teste
testImprovedMetrics();
