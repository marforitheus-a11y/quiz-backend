const https = require('https');

function testWithOfficialAdmin() {
    console.log('üîê Testando com credenciais oficiais do administrador...');
    
    const loginData = JSON.stringify({
        username: 'matheusmarfori1',
        password: 'Realmadry19*'
    });
    
    const options = {
        hostname: 'quiz-api-z4ri.onrender.com',
        path: '/login',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': Buffer.byteLength(loginData)
        }
    };
    
    const req = https.request(options, (res) => {
        let data = '';
        
        res.on('data', (chunk) => {
            data += chunk;
        });
        
        res.on('end', () => {
            console.log('üìä Status do login:', res.statusCode);
            
            if (res.statusCode === 200) {
                try {
                    const response = JSON.parse(data);
                    console.log('‚úÖ Login bem-sucedido com matheusmarfori1!');
                    console.log('üé´ Token obtido');
                    
                    // Executar corre√ß√£o de categorias imediatamente
                    fixCategoriesNow(response.token);
                    
                } catch (err) {
                    console.log('‚ùå Erro no parse do login:', err.message);
                    console.log('Response:', data);
                }
            } else {
                console.log('‚ùå Login falhou:', data);
                console.log('Vou tentar criar o usu√°rio admin...');
                createAdminUser();
            }
        });
    });
    
    req.on('error', (err) => {
        console.error('‚ùå Erro na requisi√ß√£o de login:', err.message);
    });
    
    req.write(loginData);
    req.end();
}

function createAdminUser() {
    console.log('\nüë§ Tentando criar usu√°rio admin via endpoint...');
    
    const userData = JSON.stringify({
        username: 'matheusmarfori1',
        email: 'matheus@admin.com',
        password: 'Realmadry19*',
        isAdmin: true
    });
    
    const options = {
        hostname: 'quiz-api-z4ri.onrender.com',
        path: '/register',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': Buffer.byteLength(userData)
        }
    };
    
    const req = https.request(options, (res) => {
        let data = '';
        
        res.on('data', (chunk) => {
            data += chunk;
        });
        
        res.on('end', () => {
            console.log('üìä Status do registro:', res.statusCode);
            console.log('üìÑ Response:', data);
            
            if (res.statusCode === 201 || res.statusCode === 200) {
                console.log('‚úÖ Usu√°rio criado! Tentando login novamente...');
                setTimeout(() => {
                    testWithOfficialAdmin();
                }, 3000);
            } else {
                console.log('‚ùå Falha ao criar usu√°rio');
            }
        });
    });
    
    req.on('error', (err) => {
        console.error('‚ùå Erro na cria√ß√£o do usu√°rio:', err.message);
    });
    
    req.write(userData);
    req.end();
}

function fixCategoriesNow(token) {
    console.log('\nüõ†Ô∏è EXECUTANDO CORRE√á√ÉO DE CATEGORIAS...');
    
    const options = {
        hostname: 'quiz-api-z4ri.onrender.com',
        path: '/admin/fix-categories-advanced',
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        }
    };
    
    const req = https.request(options, (res) => {
        let data = '';
        
        res.on('data', (chunk) => {
            data += chunk;
        });
        
        res.on('end', () => {
            console.log('üìä Status da corre√ß√£o:', res.statusCode);
            
            if (res.statusCode === 200) {
                try {
                    const result = JSON.parse(data);
                    console.log('\nüéâ CORRE√á√ÉO DE CATEGORIAS CONCLU√çDA!');
                    console.log('‚úÖ Mensagem:', result.message);
                    console.log('üìà Quest√µes reclassificadas:', result.reclassified);
                    
                    if (result.byCategory && Object.keys(result.byCategory).length > 0) {
                        console.log('\nüìä RECLASSIFICA√á√ÉO POR CATEGORIA:');
                        Object.entries(result.byCategory).forEach(([cat, count]) => {
                            console.log(`  üìÅ ${cat}: ${count} quest√µes`);
                        });
                    }
                    
                    if (result.finalStats && result.finalStats.length > 0) {
                        console.log('\nüìà ESTAT√çSTICAS FINAIS:');
                        result.finalStats.forEach(stat => {
                            console.log(`  üìö ${stat.category}: ${stat.count} quest√µes`);
                        });
                        
                        // An√°lise detalhada
                        const semCategoria = result.finalStats.find(s => s.category === 'Sem Categoria');
                        const outrasCategs = result.finalStats.filter(s => s.category !== 'Sem Categoria');
                        const totalOutras = outrasCategs.reduce((sum, s) => sum + s.count, 0);
                        
                        console.log(`\nüéØ AN√ÅLISE FINAL:`);
                        console.log(`  ‚úÖ Quest√µes categorizadas: ${totalOutras}`);
                        console.log(`  ‚ö†Ô∏è Ainda sem categoria: ${semCategoria ? semCategoria.count : 0}`);
                        
                        if (!semCategoria || semCategoria.count < 500) {
                            console.log(`  üéâ EXCELENTE! Problema das categorias resolvido!`);
                        } else if (semCategoria.count < 1500) {
                            console.log(`  ‚úÖ BOM PROGRESSO! Reduziu significativamente quest√µes sem categoria.`);
                        } else {
                            console.log(`  ‚ö†Ô∏è ATEN√á√ÉO: Ainda h√° ${semCategoria.count} quest√µes para categorizar.`);
                        }
                    }
                    
                    // Aguardar e testar m√©tricas
                    console.log('\n‚è≥ Aguardando 20 segundos para testar m√©tricas...');
                    setTimeout(() => {
                        testMetricsAfterFix(token);
                    }, 20000);
                    
                } catch (err) {
                    console.log('‚ùå Erro ao parse resultado:', err.message);
                    console.log('Response (primeiros 1000 chars):', data.substring(0, 1000));
                }
            } else {
                console.log('‚ùå Erro na corre√ß√£o:', res.statusCode);
                console.log('Response:', data.substring(0, 500));
            }
        });
    });
    
    req.on('error', (err) => {
        console.error('‚ùå Erro na requisi√ß√£o de corre√ß√£o:', err.message);
    });
    
    req.end();
}

function testMetricsAfterFix(token) {
    console.log('\nüìä TESTANDO M√âTRICAS AP√ìS CORRE√á√ÉO...');
    
    const options = {
        hostname: 'quiz-api-z4ri.onrender.com',
        path: '/admin/dashboard/metrics',
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${token}`
        }
    };
    
    const req = https.request(options, (res) => {
        let data = '';
        
        res.on('data', (chunk) => {
            data += chunk;
        });
        
        res.on('end', () => {
            if (res.statusCode === 200) {
                try {
                    const metrics = JSON.parse(data);
                    
                    console.log('\nüéØ VERIFICA√á√ÉO FINAL DAS CATEGORIAS:');
                    
                    if (metrics.questionStats?.byCategory?.length > 0) {
                        let semCategoriaCount = 0;
                        let totalOutras = 0;
                        let categoriasEncontradas = [];
                        
                        metrics.questionStats.byCategory.forEach(cat => {
                            if (cat.category === 'Sem Categoria') {
                                semCategoriaCount = cat.count;
                                console.log(`  ‚ö†Ô∏è ${cat.category}: ${cat.count} quest√µes`);
                            } else {
                                totalOutras += cat.count;
                                categoriasEncontradas.push(`${cat.category} (${cat.count})`);
                                console.log(`  ‚úÖ ${cat.category}: ${cat.count} quest√µes`);
                            }
                        });
                        
                        console.log(`\nüìä RESUMO FINAL:`);
                        console.log(`  üéØ Total de categorias diferentes: ${categoriasEncontradas.length}`);
                        console.log(`  ‚úÖ Quest√µes categorizadas: ${totalOutras}`);
                        console.log(`  ‚ö†Ô∏è Ainda sem categoria: ${semCategoriaCount}`);
                        
                        const porcentagemCategorizada = ((totalOutras / (totalOutras + semCategoriaCount)) * 100).toFixed(1);
                        console.log(`  üìà Porcentagem categorizada: ${porcentagemCategorizada}%`);
                        
                        if (semCategoriaCount < 1000) {
                            console.log('\nüéâ PROBLEMA RESOLVIDO! Dashboard agora mostra categorias variadas!');
                        } else if (semCategoriaCount < 2000) {
                            console.log('\n‚úÖ PROGRESSO SIGNIFICATIVO! Muito melhor que antes!');
                        } else {
                            console.log('\n‚ö†Ô∏è Ainda precisa de mais melhorias na categoriza√ß√£o.');
                        }
                        
                    } else {
                        console.log('‚ùå Nenhuma categoria encontrada nas m√©tricas');
                    }
                    
                } catch (err) {
                    console.log('‚ùå Erro ao parse m√©tricas:', err.message);
                }
            } else {
                console.log('‚ùå Erro ao buscar m√©tricas:', res.statusCode);
            }
        });
    });
    
    req.on('error', (err) => {
        console.error('‚ùå Erro na requisi√ß√£o de m√©tricas:', err.message);
    });
    
    req.end();
}

// Iniciar teste
testWithOfficialAdmin();
